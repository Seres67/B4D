package fr.B4D.socket;

import org.junit.Test;

import fr.B4D.program.CancelProgramException;
import fr.B4D.program.StopProgramException;

@SuppressWarnings("javadoc")
public class HDVSocketHelperTest {

	@Test
	public void HDVItemView1() throws StopProgramException, CancelProgramException, InstantiationException, IllegalAccessException {
		byte[] socket = {0x33, (byte) 0xe1, 0x17, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x01, (byte) 0x9b, (byte) 0xf6, 0x19, (byte) 0xf9, 0x11, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x01, 0x09, (byte) 0xe9, 0x03, 0x02, (byte) 0xc0};

		DofusSocket dofusSocket = new DofusSocket(socket);
		
		DofusSocketHelper helper = new DofusSocketHelper(dofusSocket);
		helper.find(1);
		helper.find(9);
		helper.find(489);
		
		helper.printResults();
	}
	
	@Test
	public void HDVddEncloseOpen1() throws StopProgramException, CancelProgramException, InstantiationException, IllegalAccessException {
		byte[] socket = {
					  0x00, (byte) 0x9e, 0x01, 0x21, 0x00, 0x02, 0x03, 0x41, 0x44, (byte) 0xc2,
					  0x57, (byte) 0x80, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c,
					  0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a,
					  0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x12,
					  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x14,
					  0x00, 0x00, 0x00, 0x03, 0x47, 0x44, 0x34, 0x00, 0x4b, (byte) 0xbd, 0x08, (byte) 0xac, 0x24, (byte) 0xa0, 0x1f, 0x40,
					  (byte) 0xb5, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7d, (byte) 0x86, 0x17, (byte) 0x90, 0x4e, (byte) 0xe8, 0x07, (byte) 0xe8,
					  0x07, 0x00, (byte) 0xd0, 0x0f, (byte) 0xff, (byte) 0xff, (byte) 0xdb, (byte) 0xde, (byte) 0xff, (byte) 0xff, (byte) 0xd8, (byte) 0xf0, (byte) 0x90, 0x4e, (byte) 0xc4, 0x13,
					  (byte) 0x90, 0x4e, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6e, 0x00, 0x00, 0x00, 0x00,
					  0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x02, (byte) 0xb2, 0x01, 0x02, 0x7d, 0x0f, 0x00,
					  0x41, 0x44, (byte) 0xc2, 0x57, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00,
					  0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x0a, 0x00,
					  0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x14, 0x00,
					  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00,
					  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x07, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x00, 0x4b,
					  (byte) 0xbd, 0x08, 0x00, 0x00, 0x40, (byte) 0x82, (byte) 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, (byte) 0x90,
					  0x4e, 0x00, (byte) 0xe8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x55, (byte) 0xff, (byte) 0xff, (byte) 0xd8, (byte) 0xf0, (byte) 0x90, 0x4e,
					  0x00, (byte) 0x90, 0x4e, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6e, 0x00, 0x00, 0x00,
					  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x5d, (byte) 0x9e, 0x01, 0x21, 0x00,
					  0x02, 0x03, 0x41, 0x44, (byte) 0xc2, 0x57, (byte) 0x80, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0e, 0x00, 0x00, 0x00,
					  0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
					  0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
					  0x17, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
					  0x0a, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x03, 0x47, 0x44, 0x34, 0x00, 0x4b, (byte) 0xbd, 0x08,
					  (byte) 0xac, 0x24, (byte) 0xa0, 0x1f, 0x40, (byte) 0xb5, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7d, (byte) 0x86, 0x17,
					  (byte) 0x90, 0x4e, (byte) 0xe8, 0x07, (byte) 0xe8, 0x07, 0x00, (byte) 0xd0, 0x0f, (byte) 0xff, (byte) 0xff, (byte) 0xdb, (byte) 0xde, (byte) 0xff, (byte) 0xff, (byte) 0xd8,
					  (byte) 0xf0, (byte) 0x90, 0x4e, (byte) 0xc4, 0x13, (byte) 0x90, 0x4e, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x00, 0x00, 0x00, 0x00, 0x40,
					  0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x02, (byte) 0xb2,
					  0x01, 0x02, 0x7d, 0x0f, 0x00, 0x41, 0x44, (byte) 0xc2, 0x57, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0e,
					  0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x14,
					  0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11,
					  0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0a,
					  0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x07, 0x7a, 0x7a, 0x7a, 0x7a,
					  0x7a, 0x7a, 0x7a, 0x00, 0x4b, (byte) 0xbd, 0x08, 0x00, 0x00, 0x40, (byte) 0x82, (byte) 0xc0, 0x00, 0x00, 0x00, 0x00,
					  0x00, 0x01, 0x00, 0x00, (byte) 0x90, 0x4e, 0x00, (byte) 0xe8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x55, (byte) 0xff,
					  (byte) 0xff, (byte) 0xd8, (byte) 0xf0, (byte) 0x90, 0x4e, 0x00, (byte) 0x90, 0x4e, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x00, 0x00, 0x00, 0x00,
					  0x40, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
					  0x02, (byte) 0xc0                                           
  		};

		DofusSocket dofusSocket = new DofusSocket(socket);
		DofusSocketHelper helper = new DofusSocketHelper(dofusSocket);
		
		helper.find(7765);
		
		helper.find(2000);
		helper.find(652);
		helper.find(1500);
		helper.find(240);
		helper.find(2500);
		helper.find(1000);
		helper.find(2950);
		helper.find(-10000);
		helper.find(-9250);
		helper.find(10000);
		
		helper.printResults();
	}
	
	@Test
	public void HDVddEncloseOpen2() throws StopProgramException, CancelProgramException, InstantiationException, IllegalAccessException {
		
		byte[] socket = {
			0x00, (byte) 0x9d, (byte) 0xa4, 0x00, 0x01, 0x02, 0x41, 0x41, (byte) 0xa5, (byte) 0x86,
			0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00,
			0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00,
			0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00,
			0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0c, 0x52, 0x6f, 0x75, 0x73, 0x73, 0x65, 0x2d, 0x4d, 0x2d,
			0x41, 0x30, 0x31, 0x00, 0x4b, (byte) 0xbd, 0x08, (byte) 0xb2, 0x2c, (byte) 0xfc, 0x2a, 0x40, (byte) 0xbc, 0x52, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x06, (byte) 0x82, 0x01, (byte) 0xc4, 0x13, (byte) 0x90, 0x4e, (byte) 0xe8, 0x07, (byte) 0xe8, 0x07, (byte) 0xcc, 0x0f,
			(byte) 0xd0, 0x0f, (byte) 0xff, (byte) 0xff, (byte) 0xed, (byte) 0xf6, (byte) 0xff, (byte) 0xff, (byte) 0xd8, (byte) 0xf0, (byte) 0x90, 0x4e, (byte) 0x90, 0x4e, (byte) 0x90, 0x4e,
			(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x00, 0x00, 0x00, 0x38, 0x40, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x02, (byte) 0xb2, 0x01, 0x03, 0x7d, 0x12, 0x5d, (byte) 0x9d, (byte) 0xa4,
			0x00, 0x01, 0x02, 0x41, 0x41, (byte) 0xa5, (byte) 0x86, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0e, 0x00, 0x00,
			0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00,
			0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00,
			0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00,
			0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0c, 0x52, 0x6f,
			0x75, 0x73, 0x73, 0x65, 0x2d, 0x4d, 0x2d, 0x41, 0x30, 0x31, 0x00, 0x4b, (byte) 0xbd, 0x08, (byte) 0xb2, 0x2c,
			(byte) 0xfc, 0x2a, 0x40, (byte) 0xbc, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, (byte) 0x82, 0x01, (byte) 0xc4, 0x13, (byte) 0x90,
			0x4e, (byte) 0xe8, 0x07, (byte) 0xe8, 0x07, (byte) 0xcc, 0x0f, (byte) 0xd0, 0x0f, (byte) 0xff, (byte) 0xff, (byte) 0xed, (byte) 0xf6, (byte) 0xff, (byte) 0xff, (byte) 0xd8,
			(byte) 0xf0, (byte) 0x90, 0x4e, (byte) 0x90, 0x4e, (byte) 0x90, 0x4e, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x00, 0x00, 0x00, 0x38, 0x40,
			0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x02, (byte) 0xb2,
			0x01, 0x03, 0x7d, 0x12, 0x02, (byte) 0xc0
		};

		DofusSocket dofusSocket = new DofusSocket(socket);
		DofusSocketHelper helper = new DofusSocketHelper(dofusSocket);
		
		helper.find(1996);	//Energie
		helper.find(2000);	//Max energie
		helper.find(182);	//Expérience
		helper.find(1750);	//max experience
		helper.find(56);	//Fatigue
		helper.find(240);	//Max fatigue
		helper.find(10000);	//Amour
		//helper.find(10000);	//max amour
		helper.find(1000);	//Maturité
		helper.find(1000);	//Max maturité
		helper.find(2500);	//Endurance
		//helper.find(10000);	//Max endurance
		helper.find(-10000);//Min serenite
		helper.find(-4618);	//Serenite
		helper.find(10000);	//Max serenite/endurance/amour
		
		helper.printResults();
	}
	

	@Test
	public void ResourceGrowBle() throws StopProgramException, CancelProgramException, InstantiationException, IllegalAccessException {
		//byte[] socket = {0x59, 0x35, 0x08, 0x00, 0x07, 0x31, 0x1c, (byte) 0xae, 0x02, 0x00, 0x00, 0x59, 0x31, 0x14, 0x00, 0x07, 0x31, 0x1c, 0x00, 0x00, 0x00, 0x26, 0x00, 0x01, 0x00, (byte) 0xdb, 0x2d, 0x06, 0x39, (byte) 0xfd, (byte) 0x88, 0x00, 0x00, 0x01};
		
		
	}
}